#! /bin/bash

#parameters
STATIC_LOGS=true
CREATE_EXPECTED_OUTPUT_FILE=false

NO_OF_MACHINES=3
LOG_BASE_LOCATION=/tmp/ag/
LOG_PREFIX=machine.
LOG_SUFFIX=.log

SERVER_ADDRESS=192.17.11.51
SERVER_PORT=45002

ips=(127.0.0.1 127.0.0.1 127.0.0.1 127.0.0.1)

echo "Machine ips are: "
for ip in ${ips[@]} 
do
	echo $ip
done

if [ "$STATIC_LOGS" == "false" ]
then
	#create the required log files

	for(( i=0; i<$NO_OF_MACHINES; i++))
	do
		LOG_INDEX=$(($i + 1))
		LOG_FILE_NAME=$LOG_BASE_LOCATION$LOG_PREFIX$LOG_INDEX$LOG_SUFFIX
		
		echo "Creating $LOG_FILE_NAME.."
		
		#add random lines
		./unitTesting/createLogFile $LOG_INDEX $LOG_INDEX K
		
		#insert some known line
		echo "key1:value1" >> $LOG_FILE_NAME
		echo "key1:value2" >> $LOG_FILE_NAME
		
		#add some more random lines
		./createLogFile $LOG_INDEX $LOG_INDEX K

		#push to machines
		echo "Log file created, pushing to machine with ip ${ips[$i]}.."
		scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $LOG_FILE_NAME ${ips[$i]}:$LOG_FILE_NAME.scpd
	done
fi

failed="false"

#the grep commands we are going to run
greps=( "grep --key key1 | grep --value va.*1" "grep --key key2 | grep --value va.*2" "grep --key key3 | grep --value va.*3")
t=1

for cmd in "${greps[@]}"
do
	echo "Running $cmd"

	#run the client and server here and get the result. (which i'm expecting to be at ../FinalOutput)
	./client --dst $SERVER_ADDRESS --port $SERVER_PORT --command "$cmd"

	#now check the output
	EXPECTED_OUTPUT_FILE=unitTesting/expectedOutput_$t
	ACTUAL_OUTPUT_FILE=FinalOutput
	SORTED_SUFFIX=.sorted
	OUTPUT_LINE_GREP_EXPRESSION_1="Output follows"
	OUTPUT_LINE_GREP_EXPRESSION_2="Output of command from machine"

	if [ "$CREATE_EXPECTED_OUTPUT_FILE" == "true" ]
	then
		for(( i=0; i<$NO_OF_MACHINES; i++))
		do
			echo "key1:value1" >> $EXPECTED_OUTPUT_FILE
		done
	fi

	#strip the tags from the received output and sort it
	grep -v "$OUTPUT_LINE_GREP_EXPRESSION_1" $ACTUAL_OUTPUT_FILE | grep -v "$OUTPUT_LINE_GREP_EXPRESSION_2" | sort > $ACTUAL_OUTPUT_FILE$SORTED_SUFFIX
	sort $EXPECTED_OUTPUT_FILE > $EXPECTED_OUTPUT_FILE$SORTED_SUFFIX

	diff $ACTUAL_OUTPUT_FILE$SORTED_SUFFIX $EXPECTED_OUTPUT_FILE$SORTED_SUFFIX

	if [ $? != 0 ]
	then
		failed="true"
	fi

	rm -rf $ACTUAL_OUTPUT_FILE $ACTUAL_OUTPUT_FILE$SORTED_SUFFIX $EXPECTED_OUTPUT_FILE$SORTED_SUFFIX machine.* > /dev/null 2>&1

	if [ "$failed" == "true" ]
	then
		break
	fi
	t=`expr $t + 1`
done

if [ "$failed" == "false" ]
then
	echo "Unit test succeeded!"
else
	echo "Unit test failed!"
fi


